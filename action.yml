name: pr-validate-and-merge
description: "bumps, squashes & merges PRs by reading version-bump labels"
author: broadsheet.technology
branding:
  icon: "git-merge"
  color: "blue"

inputs:
  github-token:
    description: "GitHub token for authentication."
    required: true
  pr-id:
    description: "Pull Request ID."
    required: true

outputs:
  release-version:
    description: "The new semver version computed from PR labels."
    value: ${{ steps.determine_version.outputs.bumped_version }}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ inputs.github-token }}
        # Weâ€™ll override `ref:` after we know the PR head branch
        ref: main

    - name: Fetch PR details (head branch and title)
      id: fetch_pr_details
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        # Retrieve headRefName and title so we can check out the correct branch
        HEAD_REF_NAME=$(gh pr view ${{ inputs.pr-id }} \
          --json headRefName -q .headRefName)
        PR_TITLE=$(gh pr view ${{ inputs.pr-id }} \
          --json title -q .title)
        echo "headRefName=$HEAD_REF_NAME" >> "$GITHUB_OUTPUT"
        echo "title=$PR_TITLE" >> "$GITHUB_OUTPUT"

    - name: Switch to PR branch
      shell: bash
      run: |
        git fetch origin "${{ steps.fetch_pr_details.outputs.headRefName }}"
        git checkout "${{ steps.fetch_pr_details.outputs.headRefName }}"

    - name: Validate PR is rebased on main
      shell: bash
      run: |
        git fetch origin main
        if ! git merge-base --is-ancestor origin/main HEAD; then
          echo "PR is not rebased on top of main."
          exit 1
        fi

    - name: Determine new version from PR labels
      id: determine_version
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        # (Assumes you have cloned the repo root, and `package.json` is present)
        ./scripts/bump-version.sh "${{ inputs.pr-id }}"

    - name: Bump version in package.json
      shell: bash
      env:
        VERSION: ${{ steps.determine_version.outputs.bumped_version }}
      run: |
        jq --arg version "$VERSION" '.version = $version' package.json \
          > package.json.tmp && mv package.json.tmp package.json
        git config user.name "ðŸ¤–"
        git config user.email "git@broadsheet.technology"
        git add package.json
        git commit -m "bump $VERSION"
        git push origin HEAD:"${{ steps.fetch_pr_details.outputs.headRefName }}"

    - name: Generate commit message
      id: generate_commit_message
      shell: bash
      env:
        VERSION: ${{ steps.determine_version.outputs.bumped_version }}
      run: |
        echo "message=v${VERSION} - ${{ steps.fetch_pr_details.outputs.title }} (#${{ inputs.pr-id }})" \
          >> "$GITHUB_OUTPUT"

    #- name: Squash and merge PR
    #  shell: bash
    #  run: gh pr merge ${{ inputs.pr-id }} --squash --body "${{ steps.generate_commit_message.outputs.message }}"

    #- name: Delete branch
    #  shell: bash
    #  run: gh pr close ${{ inputs.pr-id }} --delete-branch

name: pr-validate-and-merge
description: "bumps, squashes & merges PRs using semantic-release"
author: broadsheet.technology
branding:
  icon: "git-merge"
  color: "blue"

inputs:
  github-token:
    description: "GitHub token for authentication."
    required: true

outputs:
  release-version:
    description: "The version of the release created by semantic-release."
    value: ${{ steps.calculate_version.outputs.version }}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ inputs.github-token }}

    - name: Validate PR is rebased on main
      shell: bash
      run: |
        git fetch origin main
        if ! git merge-base --is-ancestor origin/main HEAD; then
          echo "PR is not rebased on top of main."
          exit 1
        fi

    - name: Validate commit messages using commitlint
      shell: bash
      run: |
        npx commitlint --from=origin/main --to=HEAD

    - name: Calculate release version using semantic-release
      id: calculate_version
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        VERSION=$(npx semantic-release --dry-run | grep -oP '(?<=The next release version is )\d+\.\d+\.\d+')
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"

    - name: Bump version in package.json
      shell: bash
      env:
        VERSION: ${{ steps.calculate_version.outputs.version }}
      run: |
        jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp && mv package.json.tmp package.json
        git config user.name "ðŸ¤–"
        git config user.email "git@broadsheet.technology"
        git add package.json
        git commit -m "chore: bump version to $VERSION"
        git push origin HEAD:${{ github.head_ref }}

    - name: Generate commit message
      id: generate_commit_message
      shell: bash
      env:
        VERSION: ${{ steps.calculate_version.outputs.version }}
      run: |
        PR_TITLE=$(gh pr view ${{ github.event.pull_request.id }} --json title -q .title)
        echo "message=v${VERSION} - ${PR_TITLE} (#${{ github.event.issue.number }})" >> "$GITHUB_OUTPUT"

    - name: Squash and merge PR
      shell: bash
      run: gh pr merge ${{ github.event.pull_request.id }} --squash --body "${{ steps.generate_commit_message.outputs.message }}"

    - name: Delete branch
      shell: bash
      run: gh pr close ${{ github.event.pull_request.id }} --delete-branch
